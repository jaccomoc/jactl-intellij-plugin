// This is a generated file. Not intended for manual editing.
package io.jactl.intellijplugin.psi;

import com.intellij.psi.tree.IElementType;
import io.jactl.Token;
import io.jactl.TokenType;

public class JactlTokenTypes {
  public static IElementType LEFT_PAREN                 = new JactlTokenType("LEFT_PAREN", TokenType.LEFT_PAREN);
  public static IElementType RIGHT_PAREN                = new JactlTokenType("RIGHT_PAREN", TokenType.RIGHT_PAREN);
  public static IElementType LEFT_SQUARE                = new JactlTokenType("LEFT_SQUARE", TokenType.LEFT_SQUARE);
  public static IElementType RIGHT_SQUARE               = new JactlTokenType("RIGHT_SQUARE", TokenType.RIGHT_SQUARE);
  public static IElementType LEFT_BRACE                 = new JactlTokenType("LEFT_BRACE", TokenType.LEFT_BRACE);
  public static IElementType RIGHT_BRACE                = new JactlTokenType("RIGHT_BRACE", TokenType.RIGHT_BRACE);
  public static IElementType BANG                       = new JactlTokenType("BANG", TokenType.BANG);
  public static IElementType PERCENT                    = new JactlTokenType("PERCENT", TokenType.PERCENT);
  public static IElementType ACCENT                     = new JactlTokenType("ACCENT", TokenType.ACCENT);
  public static IElementType AMPERSAND                  = new JactlTokenType("AMPERSAND", TokenType.AMPERSAND);
  public static IElementType STAR                       = new JactlTokenType("STAR", TokenType.STAR);
  public static IElementType MINUS                      = new JactlTokenType("MINUS", TokenType.MINUS);
  public static IElementType PLUS                       = new JactlTokenType("PLUS", TokenType.PLUS);
  public static IElementType SLASH                      = new JactlTokenType("SLASH", TokenType.SLASH);
  public static IElementType EQUAL                      = new JactlTokenType("EQUAL", TokenType.EQUAL);
  public static IElementType LESS_THAN                  = new JactlTokenType("LESS_THAN", TokenType.LESS_THAN);
  public static IElementType GREATER_THAN               = new JactlTokenType("GREATER_THAN", TokenType.GREATER_THAN);
  public static IElementType QUESTION                   = new JactlTokenType("QUESTION", TokenType.QUESTION);
  public static IElementType COMMA                      = new JactlTokenType("COMMA", TokenType.COMMA);
  public static IElementType DOT                        = new JactlTokenType("DOT", TokenType.DOT);
  public static IElementType GRAVE                      = new JactlTokenType("GRAVE", TokenType.GRAVE);
  public static IElementType BACKSLASH                  = new JactlTokenType("BACKSLASH", TokenType.BACKSLASH);
  public static IElementType PIPE                       = new JactlTokenType("PIPE", TokenType.PIPE);
  public static IElementType COLON                      = new JactlTokenType("COLON", TokenType.COLON);
  public static IElementType SEMICOLON                  = new JactlTokenType("SEMICOLON", TokenType.SEMICOLON);
  public static IElementType SINGLE_QUOTE               = new JactlTokenType("SINGLE_QUOTE", TokenType.SINGLE_QUOTE);
  public static IElementType DOUBLE_QUOTE               = new JactlTokenType("DOUBLE_QUOTE", TokenType.DOUBLE_QUOTE);
  public static IElementType UNDERSCORE                 = new JactlTokenType("UNDERSCORE", TokenType.UNDERSCORE);
  public static IElementType QUESTION_QUESTION          = new JactlTokenType("QUESTION_QUESTION", TokenType.QUESTION_QUESTION);
  public static IElementType PERCENT_PERCENT            = new JactlTokenType("PERCENT_PERCENT", TokenType.PERCENT_PERCENT);
  public static IElementType BANG_EQUAL                 = new JactlTokenType("BANG_EQUAL", TokenType.BANG_EQUAL);
  public static IElementType EQUAL_EQUAL                = new JactlTokenType("EQUAL_EQUAL", TokenType.EQUAL_EQUAL);
  public static IElementType LESS_THAN_EQUAL            = new JactlTokenType("LESS_THAN_EQUAL", TokenType.LESS_THAN_EQUAL);
  public static IElementType GREATER_THAN_EQUAL         = new JactlTokenType("GREATER_THAN_EQUAL", TokenType.GREATER_THAN_EQUAL);
  public static IElementType QUESTION_COLON             = new JactlTokenType("QUESTION_COLON", TokenType.QUESTION_COLON);
  public static IElementType AMPERSAND_AMPERSAND        = new JactlTokenType("AMPERSAND_AMPERSAND", TokenType.AMPERSAND_AMPERSAND);
  public static IElementType PIPE_PIPE                  = new JactlTokenType("PIPE_PIPE", TokenType.PIPE_PIPE);
  public static IElementType ARROW                      = new JactlTokenType("ARROW", TokenType.ARROW);
  public static IElementType MINUS_EQUAL                = new JactlTokenType("MINUS_EQUAL", TokenType.MINUS_EQUAL);
  public static IElementType PLUS_EQUAL                 = new JactlTokenType("PLUS_EQUAL", TokenType.PLUS_EQUAL);
  public static IElementType SLASH_EQUAL                = new JactlTokenType("SLASH_EQUAL", TokenType.SLASH_EQUAL);
  public static IElementType STAR_EQUAL                 = new JactlTokenType("STAR_EQUAL", TokenType.STAR_EQUAL);
  public static IElementType AMPERSAND_EQUAL            = new JactlTokenType("AMPERSAND_EQUAL", TokenType.AMPERSAND_EQUAL);
  public static IElementType PIPE_EQUAL                 = new JactlTokenType("PIPE_EQUAL", TokenType.PIPE_EQUAL);
  public static IElementType ACCENT_EQUAL               = new JactlTokenType("ACCENT_EQUAL", TokenType.ACCENT_EQUAL);
  public static IElementType QUESTION_EQUAL             = new JactlTokenType("QUESTION_EQUAL", TokenType.QUESTION_EQUAL);
  public static IElementType DOUBLE_LESS_THAN           = new JactlTokenType("DOUBLE_LESS_THAN", TokenType.DOUBLE_LESS_THAN);
  public static IElementType DOUBLE_GREATER_THAN        = new JactlTokenType("DOUBLE_GREATER_THAN", TokenType.DOUBLE_GREATER_THAN);
  public static IElementType MINUS_MINUS                = new JactlTokenType("MINUS_MINUS", TokenType.MINUS_MINUS);
  public static IElementType PLUS_PLUS                  = new JactlTokenType("PLUS_PLUS", TokenType.PLUS_PLUS);
  public static IElementType STAR_STAR                  = new JactlTokenType("STAR_STAR", TokenType.STAR_STAR);
  public static IElementType EQUAL_GRAVE                = new JactlTokenType("EQUAL_GRAVE", TokenType.EQUAL_GRAVE);
  public static IElementType BANG_GRAVE                 = new JactlTokenType("BANG_GRAVE", TokenType.BANG_GRAVE);
  public static IElementType PERCENT_EQUAL              = new JactlTokenType("PERCENT_EQUAL", TokenType.PERCENT_EQUAL);
  public static IElementType STAR_STAR_EQUAL            = new JactlTokenType("STAR_STAR_EQUAL", TokenType.STAR_STAR_EQUAL);
  public static IElementType QUESTION_DOT               = new JactlTokenType("QUESTION_DOT", TokenType.QUESTION_DOT);
  public static IElementType QUESTION_SQUARE            = new JactlTokenType("QUESTION_SQUARE", TokenType.QUESTION_SQUARE);
  public static IElementType DOLLAR_BRACE               = new JactlTokenType("DOLLAR_BRACE", TokenType.DOLLAR_BRACE);
  public static IElementType PERCENT_PERCENT_EQUAL      = new JactlTokenType("PERCENT_PERCENT_EQUAL", TokenType.PERCENT_PERCENT_EQUAL);
  public static IElementType TRIPLE_GREATER_THAN        = new JactlTokenType("TRIPLE_GREATER_THAN", TokenType.TRIPLE_GREATER_THAN);
  public static IElementType DOUBLE_LESS_THAN_EQUAL     = new JactlTokenType("DOUBLE_LESS_THAN_EQUAL", TokenType.DOUBLE_LESS_THAN_EQUAL);
  public static IElementType DOUBLE_GREATER_THAN_EQUAL  = new JactlTokenType("DOUBLE_GREATER_THAN_EQUAL", TokenType.DOUBLE_GREATER_THAN_EQUAL);
  public static IElementType TRIPLE_EQUAL               = new JactlTokenType("TRIPLE_EQUAL", TokenType.TRIPLE_EQUAL);
  public static IElementType BANG_EQUAL_EQUAL           = new JactlTokenType("BANG_EQUAL_EQUAL", TokenType.BANG_EQUAL_EQUAL);
  public static IElementType COMPARE                    = new JactlTokenType("COMPARE", TokenType.COMPARE);
  public static IElementType TRIPLE_GREATER_THAN_EQUAL  = new JactlTokenType("TRIPLE_GREATER_THAN_EQUAL", TokenType.TRIPLE_GREATER_THAN_EQUAL);
  public static IElementType DOLLAR_IDENTIFIER          = new JactlTokenType("DOLLAR_IDENTIFIER", TokenType.DOLLAR_IDENTIFIER);
  public static IElementType IDENTIFIER                 = new JactlTokenType("IDENTIFIER", TokenType.IDENTIFIER);
  public static IElementType STRING_CONST               = new JactlTokenType("STRING_CONST", TokenType.STRING_CONST);
  public static IElementType BYTE_CONST                 = new JactlTokenType("BYTE_CONST", TokenType.BYTE_CONST);
  public static IElementType INTEGER_CONST              = new JactlTokenType("INTEGER_CONST", TokenType.INTEGER_CONST);
  public static IElementType LONG_CONST                 = new JactlTokenType("LONG_CONST", TokenType.LONG_CONST);
  public static IElementType DOUBLE_CONST               = new JactlTokenType("DOUBLE_CONST", TokenType.DOUBLE_CONST);
  public static IElementType DECIMAL_CONST              = new JactlTokenType("DECIMAL_CONST", TokenType.DECIMAL_CONST);
  public static IElementType EXPR_STRING_START          = new JactlTokenType("EXPR_STRING_START", TokenType.EXPR_STRING_START);
  public static IElementType EXPR_STRING_END            = new JactlTokenType("EXPR_STRING_END", TokenType.EXPR_STRING_END);
  public static IElementType REGEX_SUBST_START          = new JactlTokenType("REGEX_SUBST_START", TokenType.REGEX_SUBST_START);
  public static IElementType REGEX_REPLACE              = new JactlTokenType("REGEX_REPLACE", TokenType.REGEX_REPLACE);
  public static IElementType DEF                        = new JactlTokenType("DEF", TokenType.DEF);
  public static IElementType VAR                        = new JactlTokenType("VAR", TokenType.VAR);
  public static IElementType BOOLEAN                    = new JactlTokenType("BOOLEAN", TokenType.BOOLEAN);
  public static IElementType BYTE                       = new JactlTokenType("BYTE", TokenType.BYTE);
  public static IElementType INT                        = new JactlTokenType("INT", TokenType.INT);
  public static IElementType LONG                       = new JactlTokenType("LONG", TokenType.LONG);
  public static IElementType DOUBLE                     = new JactlTokenType("DOUBLE", TokenType.DOUBLE);
  public static IElementType DECIMAL                    = new JactlTokenType("DECIMAL", TokenType.DECIMAL);
  public static IElementType STRING                     = new JactlTokenType("STRING", TokenType.STRING);
  public static IElementType OBJECT                     = new JactlTokenType("OBJECT", TokenType.OBJECT);
  public static IElementType VOID                       = new JactlTokenType("VOID", TokenType.VOID);
  public static IElementType MAP                        = new JactlTokenType("MAP", TokenType.MAP);
  public static IElementType LIST                       = new JactlTokenType("LIST", TokenType.LIST);
  public static IElementType FOR                        = new JactlTokenType("FOR", TokenType.FOR);
  public static IElementType IF                         = new JactlTokenType("IF", TokenType.IF);
  public static IElementType UNLESS                     = new JactlTokenType("UNLESS", TokenType.UNLESS);
  public static IElementType WHILE                      = new JactlTokenType("WHILE", TokenType.WHILE);
  public static IElementType UNTIL                      = new JactlTokenType("UNTIL", TokenType.WHILE);
  public static IElementType ELSE                       = new JactlTokenType("ELSE", TokenType.ELSE);
  public static IElementType CONTINUE                   = new JactlTokenType("CONTINUE", TokenType.CONTINUE);
  public static IElementType BREAK                      = new JactlTokenType("BREAK", TokenType.BREAK);
  public static IElementType CLASS                      = new JactlTokenType("CLASS", TokenType.CLASS);
  public static IElementType INTERFACE                  = new JactlTokenType("INTERFACE", TokenType.INTERFACE);
  public static IElementType EXTENDS                    = new JactlTokenType("EXTENDS", TokenType.EXTENDS);
  public static IElementType IMPLEMENTS                 = new JactlTokenType("IMPLEMENTS", TokenType.IMPLEMENTS);
  public static IElementType PACKAGE                    = new JactlTokenType("PACKAGE", TokenType.PACKAGE);
  public static IElementType STATIC                     = new JactlTokenType("STATIC", TokenType.STATIC);
  public static IElementType IMPORT                     = new JactlTokenType("IMPORT", TokenType.IMPORT);
  public static IElementType AS                         = new JactlTokenType("AS", TokenType.AS);
  public static IElementType TRUE                       = new JactlTokenType("TRUE", TokenType.TRUE);
  public static IElementType FALSE                      = new JactlTokenType("FALSE", TokenType.FALSE);
  public static IElementType NULL                       = new JactlTokenType("NULL", TokenType.NULL);
  public static IElementType IN                         = new JactlTokenType("IN", TokenType.IN);
  public static IElementType BANG_IN                    = new JactlTokenType("BANG_IN", TokenType.BANG_IN);
  public static IElementType INSTANCE_OF                = new JactlTokenType("INSTANCE_OF", TokenType.INSTANCE_OF);
  public static IElementType BANG_INSTANCE_OF           = new JactlTokenType("BANG_INSTANCE_OF", TokenType.BANG_INSTANCE_OF);
  public static IElementType RETURN                     = new JactlTokenType("RETURN", TokenType.RETURN);
  public static IElementType NEW                        = new JactlTokenType("NEW", TokenType.NEW);
  public static IElementType AND                        = new JactlTokenType("AND", TokenType.AND);
  public static IElementType OR                         = new JactlTokenType("OR", TokenType.OR);
  public static IElementType NOT                        = new JactlTokenType("NOT", TokenType.NOT);
  public static IElementType DO                         = new JactlTokenType("DO", TokenType.DO);
  public static IElementType PRINT                      = new JactlTokenType("PRINT", TokenType.PRINT);
  public static IElementType PRINTLN                    = new JactlTokenType("PRINTLN", TokenType.PRINTLN);
  public static IElementType BEGIN                      = new JactlTokenType("BEGIN", TokenType.BEGIN);
  public static IElementType END                        = new JactlTokenType("END", TokenType.END);
  public static IElementType DIE                        = new JactlTokenType("DIE", TokenType.DIE);
  public static IElementType EVAL                       = new JactlTokenType("EVAL", TokenType.EVAL);
  public static IElementType FINAL                      = new JactlTokenType("FINAL", TokenType.FINAL);
  public static IElementType CONST                      = new JactlTokenType("CONST", TokenType.CONST);
  public static IElementType SEALED                     = new JactlTokenType("SEALED", TokenType.SEALED);
  public static IElementType SWITCH                     = new JactlTokenType("SWITCH", TokenType.SWITCH);
  public static IElementType DEFAULT                    = new JactlTokenType("DEFAULT", TokenType.DEFAULT);
  public static IElementType EOL                        = new JactlTokenType("EOL", TokenType.EOL);
  public static IElementType EOF                        = new JactlTokenType("EOF", TokenType.EOF);
  public static IElementType NUMBER                     = new JactlTokenType("NUMBER", TokenType.NUMBER);
  public static IElementType COMMENT                    = new JactlTokenType("COMMENT", TokenType.COMMENT);
  public static IElementType WHITESPACE                 = new JactlTokenType("WHITESPACE", TokenType.WHITESPACE);

  public static IElementType elementType(Token token) {
     return switch (token.getType()) {
       case LEFT_PAREN                -> LEFT_PAREN;
       case RIGHT_PAREN               -> RIGHT_PAREN;
       case LEFT_SQUARE               -> LEFT_SQUARE;
       case RIGHT_SQUARE              -> RIGHT_SQUARE;
       case LEFT_BRACE                -> LEFT_BRACE;
       case RIGHT_BRACE               -> RIGHT_BRACE;
       case BANG                      -> BANG;
       case PERCENT                   -> PERCENT;
       case ACCENT                    -> ACCENT;
       case AMPERSAND                 -> AMPERSAND;
       case STAR                      -> STAR;
       case MINUS                     -> MINUS;
       case PLUS                      -> PLUS;
       case SLASH                     -> SLASH;
       case EQUAL                     -> EQUAL;
       case LESS_THAN                 -> LESS_THAN;
       case GREATER_THAN              -> GREATER_THAN;
       case QUESTION                  -> QUESTION;
       case COMMA                     -> COMMA;
       case DOT                       -> DOT;
       case GRAVE                     -> GRAVE;
       case BACKSLASH                 -> BACKSLASH;
       case PIPE                      -> PIPE;
       case COLON                     -> COLON;
       case SEMICOLON                 -> SEMICOLON;
       case SINGLE_QUOTE              -> SINGLE_QUOTE;
       case DOUBLE_QUOTE              -> DOUBLE_QUOTE;
       case UNDERSCORE                -> UNDERSCORE;
       case QUESTION_QUESTION         -> QUESTION_QUESTION;
       case PERCENT_PERCENT           -> PERCENT_PERCENT;
       case BANG_EQUAL                -> BANG_EQUAL;
       case EQUAL_EQUAL               -> EQUAL_EQUAL;
       case LESS_THAN_EQUAL           -> LESS_THAN_EQUAL;
       case GREATER_THAN_EQUAL        -> GREATER_THAN_EQUAL;
       case QUESTION_COLON            -> QUESTION_COLON;
       case AMPERSAND_AMPERSAND       -> AMPERSAND_AMPERSAND;
       case PIPE_PIPE                 -> PIPE_PIPE;
       case ARROW                     -> ARROW;
       case MINUS_EQUAL               -> MINUS_EQUAL;
       case PLUS_EQUAL                -> PLUS_EQUAL;
       case SLASH_EQUAL               -> SLASH_EQUAL;
       case STAR_EQUAL                -> STAR_EQUAL;
       case AMPERSAND_EQUAL           -> AMPERSAND_EQUAL;
       case PIPE_EQUAL                -> PIPE_EQUAL;
       case ACCENT_EQUAL              -> ACCENT_EQUAL;
       case QUESTION_EQUAL            -> QUESTION_EQUAL;
       case DOUBLE_LESS_THAN          -> DOUBLE_LESS_THAN;
       case DOUBLE_GREATER_THAN       -> DOUBLE_GREATER_THAN;
       case MINUS_MINUS               -> MINUS_MINUS;
       case PLUS_PLUS                 -> PLUS_PLUS;
       case STAR_STAR                 -> STAR_STAR;
       case EQUAL_GRAVE               -> EQUAL_GRAVE;
       case BANG_GRAVE                -> BANG_GRAVE;
       case PERCENT_EQUAL             -> PERCENT_EQUAL;
       case STAR_STAR_EQUAL           -> STAR_STAR_EQUAL;
       case QUESTION_DOT              -> QUESTION_DOT;
       case QUESTION_SQUARE           -> QUESTION_SQUARE;
       case DOLLAR_BRACE              -> DOLLAR_BRACE;
       case PERCENT_PERCENT_EQUAL     -> PERCENT_PERCENT_EQUAL;
       case TRIPLE_GREATER_THAN       -> TRIPLE_GREATER_THAN;
       case DOUBLE_LESS_THAN_EQUAL    -> DOUBLE_LESS_THAN_EQUAL;
       case DOUBLE_GREATER_THAN_EQUAL -> DOUBLE_GREATER_THAN_EQUAL;
       case TRIPLE_EQUAL              -> TRIPLE_EQUAL;
       case BANG_EQUAL_EQUAL          -> BANG_EQUAL_EQUAL;
       case COMPARE                   -> COMPARE;
       case TRIPLE_GREATER_THAN_EQUAL -> TRIPLE_GREATER_THAN_EQUAL;
       case DOLLAR_IDENTIFIER         -> DOLLAR_IDENTIFIER;
       case IDENTIFIER                -> IDENTIFIER;
       case STRING_CONST              -> STRING_CONST;
       case BYTE_CONST                -> BYTE_CONST;
       case INTEGER_CONST             -> INTEGER_CONST;
       case LONG_CONST                -> LONG_CONST;
       case DOUBLE_CONST              -> DOUBLE_CONST;
       case DECIMAL_CONST             -> DECIMAL_CONST;
       case EXPR_STRING_START         -> EXPR_STRING_START;
       case EXPR_STRING_END           -> EXPR_STRING_END;
       case REGEX_SUBST_START         -> REGEX_SUBST_START;
       case REGEX_REPLACE             -> REGEX_REPLACE;
       case DEF                       -> DEF;
       case VAR                       -> VAR;
       case BOOLEAN                   -> BOOLEAN;
       case BYTE                      -> BYTE;
       case INT                       -> INT;
       case LONG                      -> LONG;
       case DOUBLE                    -> DOUBLE;
       case DECIMAL                   -> DECIMAL;
       case STRING                    -> STRING;
       case OBJECT                    -> OBJECT;
       case VOID                      -> VOID;
       case MAP                       -> MAP;
       case LIST                      -> LIST;
       case FOR                       -> FOR;
       case UNTIL                     -> UNTIL;
       case IF                        -> IF;
       case UNLESS                    -> UNLESS;
       case WHILE                     -> WHILE;
       case ELSE                      -> ELSE;
       case CONTINUE                  -> CONTINUE;
       case BREAK                     -> BREAK;
       case CLASS                     -> CLASS;
       case INTERFACE                 -> INTERFACE;
       case EXTENDS                   -> EXTENDS;
       case IMPLEMENTS                -> IMPLEMENTS;
       case PACKAGE                   -> PACKAGE;
       case STATIC                    -> STATIC;
       case IMPORT                    -> IMPORT;
       case AS                        -> AS;
       case TRUE                      -> TRUE;
       case FALSE                     -> FALSE;
       case NULL                      -> NULL;
       case IN                        -> IN;
       case BANG_IN                   -> BANG_IN;
       case INSTANCE_OF               -> INSTANCE_OF;
       case BANG_INSTANCE_OF          -> BANG_INSTANCE_OF;
       case RETURN                    -> RETURN;
       case NEW                       -> NEW;
       case AND                       -> AND;
       case OR                        -> OR;
       case NOT                       -> NOT;
       case DO                        -> DO;
       case PRINT                     -> PRINT;
       case PRINTLN                   -> PRINTLN;
       case BEGIN                     -> BEGIN;
       case END                       -> END;
       case DIE                       -> DIE;
       case EVAL                      -> EVAL;
       case FINAL                     -> FINAL;
       case CONST                     -> CONST;
       case SEALED                    -> SEALED;
       case SWITCH                    -> SWITCH;
       case DEFAULT                   -> DEFAULT;
       case EOL                       -> EOL;
       case EOF                       -> EOF;
       case WHITESPACE                -> WHITESPACE;
       case COMMENT                   -> COMMENT;
       case NUMBER                    -> NUMBER;
       default -> throw new UnsupportedOperationException("Token type " + token + " not supported");
     };
  }
}
