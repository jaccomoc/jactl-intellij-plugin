<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin url="https://jactl.io">
  <id>io.jactl.intellij-jactl-plugin</id>

  <name>Jactl</name>

  <vendor email="jactl.lang@gmail.com" url="https://jactl.io">Jactl</vendor>

  <description><![CDATA[
    Intellij plugin for the <a href="https://jactl.io">Jactl language</a>, a powerful, secure scripting language for the JVM platform with familiar, but concise, syntax.</em>
    <p>
    The plugin provides the following features:
    <ul>
      <li>Syntax colouring</li>
      <li>Error highlighting</li>
      <li>Intelligent indenting</li>
      <li>Code reformat</li>
      <li>Completions</li>
      <li>Show definition/show usages navigation</li>
      <li>Comment/uncomment selected code</li>
      <li>Rename refactoring</li>
      <li>Move file/move directory refactoring</li>
      <li>Paired brace matching</li>
      <li>Build/run/debug support</li>
    </ul>
    </p>
    <p><a href="https://jactl.io">Further information</a></p>
  ]]></description>

  <depends>com.intellij.modules.platform</depends>
  <depends>com.intellij.modules.java</depends>

  <extensions defaultExtensionNs="com.intellij">
    <projectConfigurable groupId="language"
                         bundle="messages.JactlBundle"
                         key="jactl.configuration.settings.display.name"
                         id="preferences.Jactl"
                         instance="io.jactl.intellijplugin.extensions.settings.JactlConfigurable"/>

    <fileType name="Jactl File" implementationClass="io.jactl.intellijplugin.JactlFileType" fieldName="INSTANCE" language="Jactl" extensions="jactl"/>
    <lang.parserDefinition         language="Jactl" implementationClass="io.jactl.intellijplugin.JactlParserDefinition"/>
    <colorSettingsPage             implementation="io.jactl.intellijplugin.extensions.JactlColorSettingsPage"/>
    <lang.syntaxHighlighterFactory language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlSyntaxHighLighterFactory"/>
    <annotator                     language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlHighlightAnnotator" />
    <completion.contributor        language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlCompletionContributor" />
    <lang.documentationProvider    language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlDocumentationProvider"/>
    <lang.findUsagesProvider       language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlFindUsagesProvider" />
    <refactoring.moveHandler       id="jactl.movedirectry" order="first,before kotlinAwareJavaMoveClassesOrPackagesHandler"  implementation="io.jactl.intellijplugin.extensions.JactlMoveDirectoryHandler" />
    <moveFileHandler                                implementation="io.jactl.intellijplugin.extensions.JactlMoveFileHandler" />
    <lang.refactoringSupport       language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlRefactoringSupportProvider"/>
    <lang.formatter                language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlFormatingModelBuilder" />
    <lang.braceMatcher             language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlPairedBraceMatcher" />
    <lang.commenter                language="Jactl" implementationClass="io.jactl.intellijplugin.extensions.JactlCommenter" />

    <!-- runner/debugger -->
    <compileServer.plugin              classpath="jps-plugin.jar;jactl-2.0.1-SNAPSHOT.jar"/>
    <compiler.buildTargetScopeProvider implementation="io.jactl.intellijplugin.extensions.compiler.JactlTargetScopeProvider" />
    <runConfigurationProducer          implementation="io.jactl.intellijplugin.extensions.runner.JactlRunConfigurationProducer" />
    <programRunner                     implementation="io.jactl.intellijplugin.extensions.runner.JactlProgramRunner"/>
    <configurationType                 implementation="io.jactl.intellijplugin.extensions.runner.JactlRunConfigurationType" />
    <debugger.javaDebugAware           implementation="io.jactl.intellijplugin.extensions.debugger.JactlDebugAware" />
    <debugger.positionManagerFactory   implementation="io.jactl.intellijplugin.extensions.debugger.JactlPositionManagerFactory" />
    <debuggerClassFilterProvider       implementation="io.jactl.intellijplugin.extensions.debugger.JactlDebuggerClassFilterProvider" />
  </extensions>

  <extensions defaultExtensionNs="com.intellij.debugger">
    <codeFragmentFactory implementation="io.jactl.intellijplugin.extensions.debugger.JactlCodeFragmentFactory" />
  </extensions>

  <projectListeners>
    <listener class="io.jactl.intellijplugin.extensions.JactlFileOpenListener" topic="com.intellij.openapi.fileEditor.FileEditorManagerListener" />
  </projectListeners>
</idea-plugin>